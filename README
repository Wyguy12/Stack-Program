## Overview

The **Stack Program** is a Java-based application designed to simulate the operations of a generic stack data structure. 
This project includes implementations of the core stack operations such as push, pop, and peek, as well as custom exceptions for handling stack-specific errors. 
The project is built using Java 22 and Maven for dependency management and build automation. 
Unit tests are provided to ensure the correctness of the stack operations.

## Project Structure

- **GenericStack.java**: Contains the `GenericStack` class, which implements a generic stack data structure.

- **FullStackException.java**: A custom exception class that is thrown when an attempt is made to push an element onto a full stack.

- **EmptyStackException.java**: A custom exception class that is thrown when an attempt is made to pop or peek an element from an empty stack.

- **Main.java**: The driver class for the stack program. This class demonstrates the usage of the `GenericStack` by creating a stack, performing various operations.

- **GenericStackTest.java**: Contains unit tests for the `GenericStack` class.

- **pom.xml**: The Maven project file that manages dependencies and build configurations. It includes dependencies for JUnit 5 to support unit testing.

## GenericStack Class

The `GenericStack` class is a generic implementation of a stack, allowing for elements of any type to be stored. 

The stack has a fixed capacity, and the following operations are supported:

- **push(E element)**: Adds an element to the top of the stack. 
- **pop()**: Removes and returns the top element from the stack.
- **peek()**: Returns the top element from the stack without removing it. 
- **isEmpty()**: Returns `true` if the stack is empty, otherwise returns `false`.
- **getCapacity()**: Returns the capacity of the stack.

### Custom Exceptions

- **FullStackException**: This exception is thrown when an attempt is made to push an element onto a stack that has reached its maximum capacity.
- **EmptyStackException**: This exception is thrown when an attempt is made to pop or peek from an empty stack.

## Testing

Unit tests for the `GenericStack` class are provided to ensure that the stack operations work correctly under different conditions. 

The tests verify:

- Successful pushing of elements onto the stack.
- Correct popping of elements from the stack.
- Accurate peeking at the top element of the stack.
- Proper handling of empty stack and full stack conditions by throwing the appropriate exceptions.
- The behavior of the `isEmpty()` method.

### Test Cases:

- **testPush()**: Verifies that elements can be pushed onto the stack and that the correct exception is thrown when the stack is full.
- **testPop()**: Ensures that elements can be popped from the stack and that the correct exception is thrown when the stack is empty.
- **testPeek()**: Checks that the top element can be retrieved without removing it and that the correct exception is thrown when the stack is empty.
- **testIsEmpty()**: Confirms that the stack correctly identifies whether it is empty.

## Why This Project?

To deepen the understanding of data structures, particularly the stack. 